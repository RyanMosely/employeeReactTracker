{"ast":null,"code":"var _jsxFileName = \"/Users/Rmos/codingBootcamp/updateTwo/UCLA-LA-FSF-PT-09-2019-U-C-master/01-Class-Content/19-React/02-Homework/react-homework/src/App.js\";\nimport React, { Component } from \"react\";\nimport Filter from \"./components/Filter\";\nimport AmFilter from \"./components/AmFilter\";\nimport ManaFilter from \"./components/ManaFilter\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport ReactDOM from \"react-dom\";\nconst initialState = {\n  friends\n};\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  constructor(props) {\n    super(props);\n    this.state = {\n      friends\n    };\n\n    this.deparmentFilt = () => {\n      /*\n      let friendsArray = [];\n      //console.log(initialState);\n      console.log(\"testytest\");\n      */\n      this.setState({\n        friends\n      });\n      const node = ReactDOM.findDOMNode(this);\n\n      if (node instanceof HTMLElement) {\n        const child = node.querySelector('.test');\n        const childTwo = node.querySelector('.testTwo');\n        const childThree = node.querySelector('.testThree');\n        console.log(child);\n        console.log(friends);\n\n        if (child.checked === true) {} // check item 1 is set. Add filtered items to array/object\n        // check item 2 is set. Append those filtered items\n\n\n        this.setState({\n          friends\n        });\n\n        if (child.checked === true) {\n          //let friends = this.state.friends\n          let friends = this.state.friends.filter(friend => friend.network === \"i\"); //friends.sort((a, b) => 1 - 2)\n          //friends = this.state.friends.sort();\n          //console.log('friends: ', friends);\n\n          this.setState({\n            friends\n          });\n        }\n        /*\n        else if(child.checked===true && childTwo.checked===true){\n          //let friends = this.state.friends\n           console.log(\"boyHowdy\")\n           let friends = this.state.friends.filter(friend => friend.network === \"m\" || friend.network === \"a\");\n          this.setState({ friends });\n           \n        }\n        */\n\n      }\n    };\n\n    this.deparmentFiltTwo = () => {\n      let friends = this.state.friends;\n      friends.sort((a, b) => 1 - 2);\n      this.setState({\n        friends\n      });\n      console.log(friends);\n      console.log(\"jinjinjinjin\"); // Filter this.state.friends for friends with an id not equal to the id being removed\n      //const friends = this.state.friends.filter(friend => friend.name !== \"SpongeBob\");\n      //console.log(this.state);\n\n      /*\n         console.log(\"testytest\");\n      \n         const node = ReactDOM.findDOMNode(this);\n      \n         if (node instanceof HTMLElement) {\n          const child = node.querySelector('.testTwo');\n      \n          console.log(child);\n      \n          if(child.checked===true){\n            const friends = this.state.friends.filter(friend => friend.network === \"a\");\n            this.setState({ friends });\n          } else {\n            \n            this.setState({ friends });\n          }\n      \n      \n         \n      }\n      */\n    };\n\n    this.deparmentFiltThree = () => {\n      // Filter this.state.friends for friends with an id not equal to the id being removed\n      //const friends = this.state.friends.filter(friend => friend.name !== \"SpongeBob\");\n      //console.log(this.state);\n      console.log(\"testytest\");\n      const node = ReactDOM.findDOMNode(this);\n\n      if (node instanceof HTMLElement) {\n        const child = node.querySelector('.testThree');\n        console.log(child);\n\n        if (child.checked === true) {\n          const friends = this.state.friends.filter(friend => friend.network === \"e\");\n          this.setState({\n            friends\n          });\n        } else {\n          this.setState({\n            friends\n          });\n        }\n      }\n    };\n\n    this.state = initialState;\n  }\n\n  //const result = words.filter(word => word.length > 6);\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Company Employee/Intern List\"), React.createElement(Filter, {\n      deparmentFilt: this.deparmentFilt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(AmFilter, {\n      deparmentFilt: this.deparmentFiltTwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, this.state.friends.map(friend => React.createElement(FriendCard, {\n      deparmentFilt: this.deparmentFilt,\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      occupation: friend.occupation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Rmos/codingBootcamp/updateTwo/UCLA-LA-FSF-PT-09-2019-U-C-master/01-Class-Content/19-React/02-Homework/react-homework/src/App.js"],"names":["React","Component","Filter","AmFilter","ManaFilter","FriendCard","Wrapper","Title","friends","ReactDOM","initialState","App","constructor","props","state","deparmentFilt","setState","node","findDOMNode","HTMLElement","child","querySelector","childTwo","childThree","console","log","checked","filter","friend","network","deparmentFiltTwo","sort","a","b","deparmentFiltThree","render","map","id","name","occupation"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Filter from \"./components/Filter\";\nimport AmFilter from \"./components/AmFilter\";\nimport ManaFilter from \"./components/ManaFilter\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport ReactDOM from \"react-dom\";\n\nconst initialState = {\n  friends\n};\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = initialState;\n}\n\n  \n\n\n\n  deparmentFilt = () => {\n    /*\n   let friendsArray = [];\n\n//console.log(initialState);\n\n   console.log(\"testytest\");\n\n   */\n\n   this.setState({ friends }); \n\n   const node = ReactDOM.findDOMNode(this);\n   \n  \n\n   if (node instanceof HTMLElement) {\n    const child = node.querySelector('.test');\n    const childTwo = node.querySelector('.testTwo');\n    const childThree = node.querySelector('.testThree');\n\n    console.log(child);\n\n    \n\n\n    \n    console.log(friends);\n\n\n    if (child.checked === true) {\n\n    }\n    \n    // check item 1 is set. Add filtered items to array/object\n    // check item 2 is set. Append those filtered items\n\n    this.setState({ friends });\n  \n    \n    if(child.checked === true){\n      //let friends = this.state.friends\n\n      let friends = this.state.friends.filter(friend => friend.network === \"i\");\n      //friends.sort((a, b) => 1 - 2)\n\n      \n      //friends = this.state.friends.sort();\n      //console.log('friends: ', friends);\n      \n      this.setState({ friends });\n\n    }\n    \n    /*\n    else if(child.checked===true && childTwo.checked===true){\n      //let friends = this.state.friends\n\n      console.log(\"boyHowdy\")\n\n      let friends = this.state.friends.filter(friend => friend.network === \"m\" || friend.network === \"a\");\n      this.setState({ friends });\n       \n}\n*/\n\n\n\n    }\n\n  };\n\n  deparmentFiltTwo = () => {\n\n   \n\n    let friends = this.state.friends\n\n    friends.sort((a, b) => 1 - 2)\n\n    this.setState({ friends });\n    console.log(friends);\n    console.log(\"jinjinjinjin\")\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    //const friends = this.state.friends.filter(friend => friend.name !== \"SpongeBob\");\n   //console.log(this.state);\n/*\n   console.log(\"testytest\");\n\n   const node = ReactDOM.findDOMNode(this);\n\n   if (node instanceof HTMLElement) {\n    const child = node.querySelector('.testTwo');\n\n    console.log(child);\n\n    if(child.checked===true){\n      const friends = this.state.friends.filter(friend => friend.network === \"a\");\n      this.setState({ friends });\n    } else {\n      \n      this.setState({ friends });\n    }\n\n\n   \n}\n*/\n  };\n\n  deparmentFiltThree = () => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    //const friends = this.state.friends.filter(friend => friend.name !== \"SpongeBob\");\n   //console.log(this.state);\n\n   console.log(\"testytest\");\n\n   const node = ReactDOM.findDOMNode(this);\n\n   if (node instanceof HTMLElement) {\n    const child = node.querySelector('.testThree');\n\n    console.log(child);\n\n    if(child.checked===true){\n      const friends = this.state.friends.filter(friend => friend.network === \"e\");\n\n      this.setState({ friends });\n    } else {\n      \n      this.setState({ friends });\n    }\n   \n}\n  };\n\n\n  \n\n\n  //const result = words.filter(word => word.length > 6);\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Company Employee/Intern List</Title>\n\n        <Filter\n        deparmentFilt={this.deparmentFilt}\n        />\n\n        <AmFilter\n        deparmentFilt={this.deparmentFiltTwo}\n        />\n\n       \n        <br></br>\n\n        \n        <div>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            deparmentFilt={this.deparmentFilt}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            occupation={friend.occupation}\n          />\n        ))}\n      </div>\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}